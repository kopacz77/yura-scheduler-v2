generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(STUDENT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  student       Student?
}

model Student {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone             String?
  maxLessonsPerWeek Int       @default(3)
  notes             String?
  level             Level     @default(PRELIMINARY)
  emergencyContact  Json?
  lessons           Lesson[]
  payments          Payment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Lesson {
  id                String       @id @default(cuid())
  studentId         String
  student           Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  rinkId            String
  rink              Rink         @relation(fields: [rinkId], references: [id])
  startTime         DateTime
  endTime           DateTime
  duration          Int          
  type              LessonType   @default(PRIVATE)
  area              RinkArea     @default(MAIN_RINK)
  status            LessonStatus @default(SCHEDULED)
  cancellationReason String?
  cancellationTime  DateTime?
  notes             String?
  price             Float
  payment           Payment?
  timeSlotId        String?
  timeSlot          RinkTimeSlot? @relation(fields: [timeSlotId], references: [id])
  googleCalendarEventId String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([startTime])
  @@index([studentId])
  @@index([rinkId])
  @@index([timeSlotId])
}

model Payment {
  id            String        @id @default(cuid())
  lessonId      String        @unique
  lesson        Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  referenceCode String        @unique
  verifiedBy    String?
  verifiedAt    DateTime?
  reminderSentAt DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([studentId])
  @@index([status])
  @@index([referenceCode])
}

model Rink {
  id              String        @id @default(cuid())
  name            String        @unique
  timezone        String
  address         String
  lessons         Lesson[]
  timeSlots       RinkTimeSlot[]
  recurringPatterns RecurringPattern[]
  maxCapacity     Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model RinkTimeSlot {
  id          String    @id @default(cuid())
  rinkId      String
  rink        Rink      @relation(fields: [rinkId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime
  maxStudents Int       @default(1)
  lessons     Lesson[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recurringId String?   // Link to recurring pattern if this is part of a series

  @@index([rinkId])
  @@index([startTime])
  @@index([recurringId])
}

model RecurringPattern {
  id          String    @id @default(cuid())
  rinkId      String
  rink        Rink      @relation(fields: [rinkId], references: [id], onDelete: Cascade)
  daysOfWeek  Int[]     // Store days when this pattern repeats
  startDate   DateTime  // Pattern start date
  endDate     DateTime  // Pattern end date
  startTime   String    // Time in HH:mm format
  duration    Int       // Duration in minutes
  maxStudents Int       @default(1)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([rinkId])
}

enum Role {
  ADMIN
  COACH
  STUDENT
}

enum Level {
  PRE_PRELIMINARY
  PRELIMINARY
  PRE_JUVENILE
  JUVENILE
  INTERMEDIATE
  NOVICE
  JUNIOR
  SENIOR
}

enum LessonType {
  PRIVATE
  GROUP
  CHOREOGRAPHY
  COMPETITION_PREP
}

enum RinkArea {
  MAIN_RINK
  PRACTICE_RINK
  DANCE_STUDIO
}

enum LessonStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  VENMO
  ZELLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}