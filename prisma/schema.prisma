// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      Role      @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  student   Student?
}

model Student {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone             String?
  maxLessonsPerWeek Int       @default(3)
  notes             String?
  emergencyContact  Json?
  lessons           Lesson[]
  payments          Payment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Lesson {
  id                String    @id @default(cuid())
  studentId         String
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  rinkId            String
  rink              Rink      @relation(fields: [rinkId], references: [id])
  startTime         DateTime
  endTime           DateTime
  duration          Int       // in minutes
  status            LessonStatus @default(SCHEDULED)
  cancellationReason String?
  cancellationTime   DateTime?
  notes             String?
  price             Float
  payment           Payment?
  timeSlotId        String?
  timeSlot          RinkTimeSlot? @relation(fields: [timeSlotId], references: [id])
  googleCalendarEventId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([startTime])
  @@index([studentId])
  @@index([rinkId])
  @@index([timeSlotId])
}

model Payment {
  id            String    @id @default(cuid())
  lessonId      String    @unique
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  referenceCode String    @unique
  verifiedBy    String?
  verifiedAt    DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([studentId])
  @@index([status])
  @@index([referenceCode])
}

model Rink {
  id          String    @id @default(cuid())
  name        String    @unique
  timezone    String
  address     String
  lessons     Lesson[]
  timeSlots   RinkTimeSlot[]
  maxCapacity Int?      // Optional: max concurrent lessons
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RinkTimeSlot {
  id          String    @id @default(cuid())
  rinkId      String
  rink        Rink      @relation(fields: [rinkId], references: [id], onDelete: Cascade)
  startTime   String    // HH:mm format
  endTime     String    // HH:mm format
  daysOfWeek  Int[]     // Array of weekday numbers (0-6)
  maxStudents Int       @default(1)
  lessons     Lesson[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([rinkId])
}

enum Role {
  ADMIN
  COACH
  STUDENT
}

enum LessonStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  VENMO
  ZELLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
